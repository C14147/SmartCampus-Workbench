name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend

jobs:
  build-backend:
    name: Lint & Build Backend (matrix)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go fmt check
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download
        #   fmtout=$(gofmt -s -l . | wc -l) || true
        #   if [ "$fmtout" -ne "0" ]; then
        #     echo "gofmt needs to run on some files";
        #     gofmt -s -w .;
        #     exit 1;
        #   fi

      - name: Go vet
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go vet ./...

    #   - name: Optionally run golangci-lint
    #     if: fileExists('backend/.golangci.yml') || always()
    #     run: |
    #       if command -v golangci-lint >/dev/null 2>&1; then
    #         (cd backend && golangci-lint run) || true
    #       else
    #         echo "golangci-lint not installed; skipping"
    #       fi

      - name: Build backend
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            set -x
            GOOS=windows GOARCH=amd64 go build -v -o main.exe ./cmd/api
          else
            CGO_ENABLED=0 GOOS=linux go build -v -o main ./cmd/api
          fi

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary-${{ matrix.os }}
          path: |
            ${{ env.BACKEND_DIR }}/main
            ${{ env.BACKEND_DIR }}/main.exe

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install and build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Upload frontend dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

