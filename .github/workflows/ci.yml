name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend

jobs:
  build-backend-linux:
    name: Lint & Build Backend (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Libs
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download

      - name: Go vet
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go vet ./...

      - name: Build backend (Linux)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -v -o main ./cmd/api

      - name: Upload backend artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary-linux
          path: ${{ env.BACKEND_DIR }}/main

  build-backend-windows:
    name: Lint & Build Backend (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            %LOCALAPPDATA%\go-build
            %USERPROFILE%\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Libs
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download

      - name: Go vet (Windows)
        working-directory: ${{ env.BACKEND_DIR }}
        shell: pwsh
        run: |
          go vet ./...

      - name: Build backend (Windows)
        working-directory: ${{ env.BACKEND_DIR }}
        shell: pwsh
        run: |
          go mod download
          $Env:GOOS = 'windows'
          $Env:GOARCH = 'amd64'
          go build -v -o main.exe ./cmd/api

      - name: Upload backend artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary-windows
          path: ${{ env.BACKEND_DIR }}\main.exe

  build-frontend-linux:
    name: Build Frontend (Linux)
    runs-on: ubuntu-latest
    needs: [build-backend-linux, build-backend-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install and build frontend (Linux)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Upload frontend dist (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-linux
          path: frontend/dist

  build-frontend-windows:
    name: Build Frontend (Windows)
    runs-on: windows-latest
    needs: [build-backend-linux, build-backend-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules (Windows)
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\_nvm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install and build frontend (Windows)
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: pwsh
        run: |
          npm ci
          npm run build

      - name: Upload frontend dist (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-windows
          path: frontend\dist

