name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend

jobs:
  lint-and-build-backend:
    name: Lint & Build Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run go fmt check
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download
          fmtout=$(gofmt -s -l . | wc -l) || true
          if [ "$fmtout" -ne "0" ]; then
            echo "gofmt found issues; please run 'gofmt -s -w .'"
            gofmt -s -w .
            exit 1
          fi

      - name: Run go vet
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go vet ./...

      - name: Optionally run golangci-lint
        if: ${{ always() }}
        run: |
          if command -v golangci-lint >/dev/null 2>&1; then
            (cd backend && golangci-lint run) || true
          else
            echo "golangci-lint not installed; skipping"
          fi

      - name: Build backend binary
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -v -o main ./cmd/api

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend/main

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install and build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Upload frontend dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  docker-images:
    name: Build & push Docker images (optional)
    runs-on: ubuntu-latest
    needs: [lint-and-build-backend, build-frontend]
    if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/smartcampus-backend:latest -f backend/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/smartcampus-backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/smartcampus-frontend:latest -f frontend/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/smartcampus-frontend:latest
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go fmt check
        working-directory: ./backend
        run: |
          go mod download
          fmtout=$(gofmt -s -l . | wc -l) || true
          if [ "$fmtout" -ne "0" ]; then
            echo "gofmt needs to run on some files";
            gofmt -s -w .;
            exit 1;
          fi

      - name: Go vet
        working-directory: ./backend
        run: |
          go vet ./...

      - name: Optionally run golangci-lint
        if: fileExists('backend/.golangci.yml') || always()
        run: |
          if command -v golangci-lint >/dev/null 2>&1; then
            (cd backend && golangci-lint run) || true
          else
            echo "golangci-lint not installed; skipping"
          fi

      - name: Build backend
        working-directory: ./backend
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -v -o main ./cmd/api

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          if [ -f package.json ]; then
            npm run build
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend/main

      - name: Build and push Docker images (optional)
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build -t $DOCKER_USERNAME/smartcampus-backend:latest -f backend/Dockerfile .
          docker build -t $DOCKER_USERNAME/smartcampus-frontend:latest -f frontend/Dockerfile .
          docker push $DOCKER_USERNAME/smartcampus-backend:latest
          docker push $DOCKER_USERNAME/smartcampus-frontend:latest
